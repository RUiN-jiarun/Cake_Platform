(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@alicloud/mpserverless-core"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var mpserverless_core_1 = require("@alicloud/mpserverless-core");
    var REGEXP_FLAGS = ['i', 'm', 'u', 'g'];
    function _isByProto(val, type) {
        return Object.prototype.toString.call(val) === "[object " + type + "]";
    }
    exports._isByProto = _isByProto;
    function isArray(val) {
        return Array.isArray(val);
    }
    exports.isArray = isArray;
    function isObject(val) {
        return val !== null && typeof val === 'object' && !isArray(val);
    }
    exports.isObject = isObject;
    function isString(val) {
        return typeof val === 'string' || _isByProto(val, 'String');
    }
    exports.isString = isString;
    var JSONEncoder = (function (_super) {
        tslib_1.__extends(JSONEncoder, _super);
        function JSONEncoder() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        JSONEncoder.prototype.encode = function (data) {
            var _this = this;
            if (data instanceof RegExp) {
                return this.toRegexp(data);
            }
            if (data instanceof Date) {
                return this.toDate(data);
            }
            if (isArray(data)) {
                return data.map(function (d) { return _this.encode(d); });
            }
            if (isObject(data)) {
                return Object.keys(data).reduce(function (accu, k) {
                    accu[k] = _this.encode(data[k]);
                    return accu;
                }, {});
            }
            return data;
        };
        JSONEncoder.prototype.toDate = function (val) {
            return val.toISOString();
        };
        JSONEncoder.prototype.toRegexp = function (val) {
            return "/" + val.source.replace(/\\\//g, '/') + "/" + val.flags;
        };
        return JSONEncoder;
    }(mpserverless_core_1.BaseEncoder));
    exports.JSONEncoder = JSONEncoder;
    var JSONDecoder = (function (_super) {
        tslib_1.__extends(JSONDecoder, _super);
        function JSONDecoder() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        JSONDecoder.prototype.decode = function (data) {
            var _this = this;
            if (this.isRegexp(data)) {
                return this.toRegexp(data);
            }
            if (this.isDate(data)) {
                return this.toDate(data);
            }
            if (isArray(data)) {
                return data.map(function (d) { return _this.decode(d); });
            }
            if (isObject(data)) {
                return Object.keys(data).reduce(function (accu, k) {
                    accu[k] = _this.decode(data[k]);
                    return accu;
                }, {});
            }
            return data;
        };
        JSONDecoder.prototype.isDate = function (val) {
            return isString(val) && /^\d{4}\-\d{2}\-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/.test(val) && !isNaN(Date.parse(val));
        };
        JSONDecoder.prototype.isRegexp = function (val) {
            if (isString(val)) {
                var areFlagsValid = true;
                var parts = val.split('/');
                var last = parts[parts.length - 1];
                if (last) {
                    areFlagsValid = last.split('').reduce(function (expr, p) {
                        return expr === true && REGEXP_FLAGS.indexOf(p) > -1;
                    }, true);
                }
                return parts.length >= 2 && areFlagsValid;
            }
            return false;
        };
        JSONDecoder.prototype.toDate = function (val) {
            return new Date(val);
        };
        JSONDecoder.prototype.toRegexp = function (val) {
            var firstIndex = val.indexOf('/');
            var lastIndex = val.lastIndexOf('/');
            return new RegExp(val.slice(firstIndex + 1, lastIndex), val.slice(lastIndex + 1));
        };
        return JSONDecoder;
    }(mpserverless_core_1.BaseDecoder));
    exports.JSONDecoder = JSONDecoder;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9uZ28vY29kZWMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0lBQUEsaUVBQXFHO0lBTXJHLElBQU0sWUFBWSxHQUFHLENBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFFLENBQUM7SUFRNUMsU0FBZ0IsVUFBVSxDQUFDLEdBQUcsRUFBRSxJQUFJO1FBQ2xDLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLGFBQVcsSUFBSSxNQUFHLENBQUM7SUFDcEUsQ0FBQztJQUZELGdDQUVDO0lBT0QsU0FBZ0IsT0FBTyxDQUFDLEdBQUc7UUFDekIsT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzVCLENBQUM7SUFGRCwwQkFFQztJQU9ELFNBQWdCLFFBQVEsQ0FBQyxHQUFHO1FBQzFCLE9BQU8sR0FBRyxLQUFLLElBQUksSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUZELDRCQUVDO0lBT0QsU0FBZ0IsUUFBUSxDQUFDLEdBQUc7UUFDMUIsT0FBTyxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksVUFBVSxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRkQsNEJBRUM7SUFFRDtRQUFpQyx1Q0FBVztRQUE1Qzs7UUF5Q0EsQ0FBQztRQW5DUSw0QkFBTSxHQUFiLFVBQWMsSUFBUztZQUF2QixpQkFrQkM7WUFqQkMsSUFBSSxJQUFJLFlBQVksTUFBTSxFQUFFO2dCQUMxQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUF5QixDQUFDO2FBQ3BEO1lBQ0QsSUFBSSxJQUFJLFlBQVksSUFBSSxFQUFFO2dC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
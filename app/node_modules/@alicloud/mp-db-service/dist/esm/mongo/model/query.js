(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "tslib", "@alicloud/mpserverless-core", "../codec", "./collection", "./command", "../utils", "../constant"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = require("tslib");
    var mpserverless_core_1 = require("@alicloud/mpserverless-core");
    var codec_1 = require("../codec");
    var collection_1 = require("./collection");
    var command_1 = require("./command");
    var utils_1 = require("../utils");
    var constant_1 = require("../constant");
    var Query = (function () {
        function Query() {
            this.encoder = new codec_1.JSONEncoder();
            this.decoder = new codec_1.JSONDecoder();
        }
        Query.prototype.collection = function (name) {
            this.coll = new collection_1.Collection(name);
            return this;
        };
        Query.prototype.aggregate = function (pipeline, options) {
            this.comm = new command_1.AggregateCommand({ pipeline: pipeline, options: options });
            return this.execute();
        };
        Query.prototype.count = function (query, options) {
            this.comm = new command_1.CountCommand({ query: query, options: options });
            return this.execute();
        };
        Query.prototype.distinct = function (key, query, options) {
            this.comm = new command_1.DistinctCommand({ key: key, query: query, options: options });
            return this.execute();
        };
        Query.prototype.findOne = function (query, options) {
            this.comm = new command_1.FindDocumentCommand({ query: query, options: options });
            return this.execute();
        };
        Query.prototype.find = function (query, options) {
            this.comm = new command_1.FindDocumentsCommand({ query: query, options: options });
            return this.execute();
        };
        Query.prototype.insertOne = function (doc, options) {
            this.comm = new command_1.InsertDocumentCommand({ doc: doc, options: options });
            return this.execute();
        };
        Query.prototype.insertMany = function (docs, options) {
            this.comm = new command_1.InsertDocumentsCommand({ docs: docs, options: options });
            return this.execute();
        };
        Query.prototype.findOneAndUpdate = function (filter, update, options) {
            this.comm = new command_1.FindAndUpdateDocumentCommand({ filter: filter, update: update, options: options });
            return this.execute();
        };
        Query.prototype.updateOne = function (filter, update, options) {
            this.comm = new command_1.UpdateDocumentCommand({ filter: filter, update: update, options: options });
            return this.execute();
        };
        Query.prototype.updateMany = function (filter, update, options) {
            this.comm = new command_1.UpdateDocumentsCommand({ filter: filter, update: update, options: options });
            return this.execute();
        };
        Query.prototype.findOneAndReplace = function (filter, replacement, options) {
            this.comm = new command_1.FindAndReplaceDocumentCommand({ filter: filter, replacement: replacement, options: options });
            return this.execute();
        };
        Query.prototype.replaceOne = function (filter, doc, options) {
            this.comm = new command_1.ReplaceDocumentCommand({ filter: filter, doc: doc, options: options });
            return this.execute();
        };
        Query.prototype.findOneAndDelete = function (filter, options) {
            this.comm = new command_1.FindAndDeleteDocumentCommand({ filter: filter, options: options });
            return this.execute();
        };
        Query.prototype.deleteOne = function (filter, options) {
            this.comm = new command_1.DeleteDocumentCommand({ filter: filter, options: options });
            return this.execute();
        };
        Query.prototype.deleteMany = function (filter, options) {
            this.comm = new command_1.DeleteDocumentsCommand({ filter: filter, options: options });
            return this.execute();
        };
        Query.prototype.validate = function () {
            var v = new utils_1.MongoValidator();
            v.validate(this.comm.schema, this.encoder.encode(this.comm.argMap));
        };
        Query.prototype.execute = function () {
            var _ = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                _[_i] = arguments[_i];
            }
            return tslib_1.__awaiter(this, void 0, void 0, function () {
                var query;
                return tslib_1.__generator(this, function (_a) {
                    mpserverless_core_1.assert(this.comm, '[DBService]缺少 command 参数');
                    this.validate();
                    switch (this.comm.permission) {
                        case constant_1.PERMISSION.AGGREGATE:
                        case constant_1.PERMISSION.WRITE:
                        case constant_1.PERMISSION.READ:
                            mpserverless_core_1.assert(this.collection, '[DBService]缺少 collection 参数');
                            break;
                        default:
                    }
                    query = Object.assign({}, this.coll && this.coll.inspect(), this.comm.inspect());
                    return [2, this.encoder.encode(query)];
                });
            });
        };
        return Query;
    }());
    exports.Query = Query;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9uZ28vbW9kZWwvcXVlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0lBQUEsaUVBQW1GO0lBQ25GLGtDQUFvRDtJQUNwRCwyQ0FBZ0U7SUFDaEUscUNBQXVaO0lBRXZaLGtDQUEwQztJQUMxQyx3Q0FBeUM7SUFLekM7UUFBQTtZQUdZLFlBQU8sR0FBZ0IsSUFBSSxtQkFBVyxFQUFFLENBQUM7WUFDekMsWUFBTyxHQUFnQixJQUFJLG1CQUFXLEVBQUUsQ0FBQztRQTJOckQsQ0FBQztRQXBOUSwwQkFBVSxHQUFqQixVQUFrQixJQUFZO1lBQzVCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSx1QkFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pDLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQztRQVFNLHlCQUFTLEdBQWhCLFVBQWlCLFFBQW1DLEVBQUUsT0FBNEI7WUFDaEYsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLDBCQUFnQixDQUFDLEVBQUUsUUFBUSxVQUFBLEVBQUUsT0FBTyxTQUFBLEVBQUUsQ0FBQyxDQUFDO1lBQ3hELE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ3hCLENBQUM7UUFRTSxxQkFBSyxHQUFaLFVBQWEsS0FBeUIsRUFBRSxPQUE0QjtZQUNsRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksc0JBQVksQ0FBQyxFQUFFLEtBQUssT0FBQSxFQUFFLE9BQU8sU0FBQSxFQUFFLENBQUMsQ0FBQztZQUNqRCxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN4QixDQUFDO1FBU00sd0JBQVEsR0FBZixVQUFnQixHQUFXLEVBQUUsS0FBeUIsRUFBRSxPQUE0QjtZQUNsRixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUkseUJBQWUsQ0FBQyxFQUFFLEdBQUcsS0FBQSxFQUFFLEtBQUssT0FBQSxFQUFFLE9B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
(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var ErrorMessages;
    (function (ErrorMessages) {
        ErrorMessages["INVALID_TYPE"] = "field type is invalid";
        ErrorMessages["NOT_ARRAY"] = "field is not an array";
        ErrorMessages["ILLEGAL"] = "field should not contain illegal character";
    })(ErrorMessages || (ErrorMessages = {}));
    function ruleOfField(_, value) {
        function validateField(name) {
            if (/[\.\$]/.test(name)) {
                return ErrorMessages.ILLEGAL;
            }
        }
        if (Array.isArray(value)) {
            return undefined;
        }
        if (typeof value === 'string') {
            return validateField(value);
        }
        var result = null;
        for (var _i = 0, _a = Object.keys(value); _i < _a.length; _i++) {
            var key = _a[_i];
            result = validateField(key);
            if (typeof result === 'string') {
                return result;
            }
            if (typeof value[key] === 'object') {
                return ruleOfField(_, value[key]);
            }
        }
        if (result === null) {
            return ErrorMessages.INVALID_TYPE;
        }
    }
    function ruleOfFields(_, value) {
        if (!Array.isArray(value)) {
            return ErrorMessages.NOT_ARRAY;
        }
        var err;
        var i = 0;
        while (!err && i < value.length) {
            err = ruleOfField(null, value[i]);
            i++;
        }
        return err;
    }
    var rules = {
        ruleOfField: ruleOfField,
        ruleOfFields: ruleOfFields,
    };
    exports.rules = rules;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9uZ28vdXRpbHMvcnVsZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFBQSxJQUFLLGFBSUo7SUFKRCxXQUFLLGFBQWE7UUFDaEIsdURBQXNDLENBQUE7UUFDdEMsb0RBQW1DLENBQUE7UUFDbkMsdUVBQXNELENBQUE7SUFDeEQsQ0FBQyxFQUpJLGFBQWEsS0FBYixhQUFhLFFBSWpCO0lBUUQsU0FBUyxXQUFXLENBQUMsQ0FBQyxFQUFFLEtBQUs7UUFDM0IsU0FBUyxhQUFhLENBQUMsSUFBWTtZQUNqQyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3ZCLE9BQU8sYUFBYSxDQUFDLE9BQU8sQ0FBQzthQUM5QjtRQUNILENBQUM7UUFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDeEIsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFDRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtZQUM3QixPQUFPLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM3QjtRQUVELElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztRQUNsQixLQUFrQixVQUFrQixFQUFsQixLQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQWxCLGNBQWtCLEVBQWxCLElBQWtCLEVBQUU7WUFBakMsSUFBTSxHQUFHLFNBQUE7WUFDWixNQUFNLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBRTVCLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO2dCQUM5QixPQUFPLE1BQU0sQ0FBQzthQUNmO1lBQ0QsSUFBSSxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLEVBQUU7Z0JBQ2xDLE9BQU8sV0FBVyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNuQztTQUNGO1FBRUQsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQ25CLE9BQU8sYUFBYSxDQUFDLFlBQVksQ0FBQztTQUNuQztJQUNILENBQUM7SUFRRCxTQUFTLFlBQVksQ0FBQyxDQUFDLEVBQUUsS0FBSztRQUM1QixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN6QixPQUFPLGFBQWEsQ0FBQyxTQUFTLENBQUM7U0FDaEM7UUFFRCxJQUFJLEdBQUcsQ0FBQztRQUNSLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNWLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDL0IsR0FBRyxHQUFHLFdBQVcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDbEMsQ0FBQyxFQUFFLENBQUM7U0FDTDtRQUVELE9BQU8sR0FBRyxDQUFDO0lBQ2IsQ0FBQztJQUVELElBQU0sS0FBSyxHQUFHO1FBQ1osV0FBVyxhQUFBO1FBQ1gsWUFBWSxjQUFBO0tBQ2IsQ0FBQztJQUVPLHNCQUFLIn0=
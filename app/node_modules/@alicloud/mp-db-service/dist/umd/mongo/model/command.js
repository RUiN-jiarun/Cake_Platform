"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const codec_1 = require("../codec");
const constant_1 = require("../constant");
class BaseCommand {
    constructor(argMap) {
        this._schema = {};
        this._argMap = {};
        this._argMap = argMap;
        if (!this._argMap.options) {
            this._argMap.options = {};
        }
    }
    get permission() {
        switch (this._permission) {
            case constant_1.PERMISSION.CREATE:
            case constant_1.PERMISSION.UPDATE:
            case constant_1.PERMISSION.DELETE:
                return constant_1.PERMISSION.WRITE;
            default:
                return this._permission;
        }
    }
    get argMap() {
        return this._argMap;
    }
    get schema() {
        return this._schema;
    }
    augmentOptions(options) {
        this.argMap.options = Object.assign({}, this.argMap.options, options);
    }
    inspect() {
        const args = clean(JSON.parse(JSON.stringify(this.argMap)));
        function clean(d) {
            for (const k of Object.keys(d)) {
                if (codec_1.isObject(d[k])) {
                    if (Object.keys(d[k]).length === 0) {
                        delete d[k];
                    }
                    else {
                        clean(d[k]);
                    }
                }
                if (d[k] === undefined) {
                    delete d[k];
                }
            }
            return d;
        }
        return Object.assign(Object.assign({}, args), { command: this.name });
    }
}
exports.BaseCommand = BaseCommand;
class AggregateCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.name = 'aggregate';
        this._schema = {
            pipeline: 'array',
            options: {
                type: 'object',
                required: false,
            },
        };
        this._permission = constant_1.PERMISSION.AGGREGATE;
    }
}
exports.AggregateCommand = AggregateCommand;
class CountCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.name = 'count';
        this._schema = {
            query: 'object',
            options: {
                type: 'object',
                required: false,
            },
        };
        this._permission = constant_1.PERMISSION.READ;
    }
}
exports.CountCommand = CountCommand;
class DistinctCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.name = 'distinct';
        this._schema = {
            key: 'string',
            query: 'object',
            options: {
                type: 'object',
                required: false,
            },
        };
        this._permission = constant_1.PERMISSION.READ;
    }
}
exports.DistinctCommand = DistinctCommand;
class FindDocumentCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.name = 'findOne';
        this._schema = {
            query: 'object',
            options: {
                type: 'object',
                required: false,
            },
        };
        this._permission = constant_1.PERMISSION.READ;
    }
}
exports.FindDocumentCommand = FindDocumentCommand;
class FindDocumentsCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.name = 'find';
        this._schema = {
            query: {
                type: 'object',
                required: false,
            },
            options: {
                type: 'object',
                required: false,
            },
        };
        this._permission = constant_1.PERMISSION.READ;
    }
}
exports.FindDocumentsCommand = FindDocumentsCommand;
class InsertDocumentCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.name = 'insertOne';
        this._schema = {
            doc: 'field',
            options: {
                type: 'object',
                required: false,
            },
        };
        this._permission = constant_1.PERMISSION.CREATE;
    }
}
exports.InsertDocumentCommand = InsertDocumentCommand;
class InsertDocumentsCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.name = 'insertMany';
        this._schema = {
            docs: 'fields',
            options: {
                type: 'object',
                required: false,
            },
        };
        this._permission = constant_1.PERMISSION.CREATE;
    }
}
exports.InsertDocumentsCommand = InsertDocumentsCommand;
class FindAndUpdateDocumentCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.name = 'findOneAndUpdate';
        this._schema = {
            filter: 'object',
            update: 'object',
            options: {
                type: 'object',
                required: false,
            },
        };
        this._permission = constant_1.PERMISSION.UPDATE;
    }
}
exports.FindAndUpdateDocumentCommand = FindAndUpdateDocumentCommand;
class UpdateDocumentCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.name = 'updateOne';
        this._schema = {
            filter: 'object',
            update: 'object',
            options: {
                type: 'object',
                required: false,
            },
        };
        this._permission = constant_1.PERMISSION.UPDATE;
    }
}
exports.UpdateDocumentCommand = UpdateDocumentCommand;
class UpdateDocumentsCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.name = 'updateMany';
        this._schema = {
            filter: 'object',
            update: 'object',
            options: {
                type: 'object',
                required: false,
            },
        };
        this._permission = constant_1.PERMISSION.UPDATE;
    }
}
exports.UpdateDocumentsCommand = UpdateDocumentsCommand;
class FindAndReplaceDocumentCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.name = 'findOneAndReplace';
        this._schema = {
            filter: 'object',
            replacement: 'object',
            options: {
                type: 'object',
                required: false,
            },
        };
        this._permission = constant_1.PERMISSION.UPDATE;
    }
}
exports.FindAndReplaceDocumentCommand = FindAndReplaceDocumentCommand;
class ReplaceDocumentCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.name = 'replaceOne';
        this._schema = {
            filter: 'object',
            doc: 'object',
            options: {
                type: 'object',
                required: false,
            },
        };
        this._permission = constant_1.PERMISSION.UPDATE;
    }
}
exports.ReplaceDocumentCommand = ReplaceDocumentCommand;
class FindAndDeleteDocumentCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.name = 'findOneAndDelete';
        this._schema = {
            filter: 'object',
            options: {
                type: 'object',
                required: false,
            },
        };
        this._permission = constant_1.PERMISSION.DELETE;
    }
}
exports.FindAndDeleteDocumentCommand = FindAndDeleteDocumentCommand;
class DeleteDocumentCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.name = 'deleteOne';
        this._schema = {
            filter: 'object',
            options: {
                type: 'object',
                required: false,
            },
        };
        this._permission = constant_1.PERMISSION.DELETE;
    }
}
exports.DeleteDocumentCommand = DeleteDocumentCommand;
class DeleteDocumentsCommand extends BaseCommand {
    constructor() {
        super(...arguments);
        this.name = 'deleteMany';
        this._schema = {
            filter: {
                type: 'object',
                required: false,
            },
            options: {
                type: 'object',
                required: false,
            },
        };
        this._permission = constant_1.PERMISSION.DELETE;
    }
}
exports.DeleteDocumentsCommand = DeleteDocumentsCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9tb25nby9tb2RlbC9jb21tYW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0Esb0NBQW9DO0FBQ3BDLDBDQUF5QztBQU96QyxNQUFhLFdBQVc7SUFNdEIsWUFBWSxNQUEwQjtRQUo1QixZQUFPLEdBQXVCLEVBQUUsQ0FBQztRQUNqQyxZQUFPLEdBQXVCLEVBQUUsQ0FBQztRQUl6QyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztRQUN0QixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7WUFDekIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1NBQzNCO0lBQ0gsQ0FBQztJQU1ELElBQVcsVUFBVTtRQUNuQixRQUFRLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDeEIsS0FBSyxxQkFBVSxDQUFDLE1BQU0sQ0FBQztZQUN2QixLQUFLLHFCQUFVLENBQUMsTUFBTSxDQUFDO1lBQ3ZCLEtBQUsscUJBQVUsQ0FBQyxNQUFNO2dCQUNwQixPQUFPLHFCQUFVLENBQUMsS0FBSyxDQUFDO1lBQzFCO2dCQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztTQUMzQjtJQUNILENBQUM7SUFFRCxJQUFXLE1BQU07UUFDZixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDdEIsQ0FBQztJQUVELElBQVcsTUFBTTtRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBT00sY0FBYyxDQUFDLE9BQTJCO1FBQy9DLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hFLENBQUM7SUFNTSxPQUFPO1FBQ1osTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFD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
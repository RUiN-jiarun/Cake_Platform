"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const mpserverless_core_1 = require("@alicloud/mpserverless-core");
const codec_1 = require("../codec");
const collection_1 = require("./collection");
const command_1 = require("./command");
const utils_1 = require("../utils");
const constant_1 = require("../constant");
class Query {
    constructor() {
        this.encoder = new codec_1.JSONEncoder();
        this.decoder = new codec_1.JSONDecoder();
    }
    collection(name) {
        this.coll = new collection_1.Collection(name);
        return this;
    }
    aggregate(pipeline, options) {
        this.comm = new command_1.AggregateCommand({ pipeline, options });
        return this.execute();
    }
    count(query, options) {
        this.comm = new command_1.CountCommand({ query, options });
        return this.execute();
    }
    distinct(key, query, options) {
        this.comm = new command_1.DistinctCommand({ key, query, options });
        return this.execute();
    }
    findOne(query, options) {
        this.comm = new command_1.FindDocumentCommand({ query, options });
        return this.execute();
    }
    find(query, options) {
        this.comm = new command_1.FindDocumentsCommand({ query, options });
        return this.execute();
    }
    insertOne(doc, options) {
        this.comm = new command_1.InsertDocumentCommand({ doc, options });
        return this.execute();
    }
    insertMany(docs, options) {
        this.comm = new command_1.InsertDocumentsCommand({ docs, options });
        return this.execute();
    }
    findOneAndUpdate(filter, update, options) {
        this.comm = new command_1.FindAndUpdateDocumentCommand({ filter, update, options });
        return this.execute();
    }
    updateOne(filter, update, options) {
        this.comm = new command_1.UpdateDocumentCommand({ filter, update, options });
        return this.execute();
    }
    updateMany(filter, update, options) {
        this.comm = new command_1.UpdateDocumentsCommand({ filter, update, options });
        return this.execute();
    }
    findOneAndReplace(filter, replacement, options) {
        this.comm = new command_1.FindAndReplaceDocumentCommand({ filter, replacement, options });
        return this.execute();
    }
    replaceOne(filter, doc, options) {
        this.comm = new command_1.ReplaceDocumentCommand({ filter, doc, options });
        return this.execute();
    }
    findOneAndDelete(filter, options) {
        this.comm = new command_1.FindAndDeleteDocumentCommand({ filter, options });
        return this.execute();
    }
    deleteOne(filter, options) {
        this.comm = new command_1.DeleteDocumentCommand({ filter, options });
        return this.execute();
    }
    deleteMany(filter, options) {
        this.comm = new command_1.DeleteDocumentsCommand({ filter, options });
        return this.execute();
    }
    validate() {
        const v = new utils_1.MongoValidator();
        v.validate(this.comm.schema, this.encoder.encode(this.comm.argMap));
    }
    execute(..._) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            mpserverless_core_1.assert(this.comm, '[DBService]缺少 command 参数');
            this.validate();
            switch (this.comm.permission) {
                case constant_1.PERMISSION.AGGREGATE:
                case constant_1.PERMISSION.WRITE:
                case constant_1.PERMISSION.READ:
                    mpserverless_core_1.assert(this.collection, '[DBService]缺少 collection 参数');
                    break;
                default:
            }
            const query = Object.assign({}, this.coll && this.coll.inspect(), this.comm.inspect());
            return this.encoder.encode(query);
        });
    }
}
exports.Query = Query;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVlcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvbW9uZ28vbW9kZWwvcXVlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsbUVBQW1GO0FBQ25GLG9DQUFvRDtBQUNwRCw2Q0FBZ0U7QUFDaEUsdUNBQXVaO0FBRXZaLG9DQUEwQztBQUMxQywwQ0FBeUM7QUFLekMsTUFBYSxLQUFLO0lBQWxCO1FBR1ksWUFBTyxHQUFnQixJQUFJLG1CQUFXLEVBQUUsQ0FBQztRQUN6QyxZQUFPLEdBQWdCLElBQUksbUJBQVcsRUFBRSxDQUFDO0lBMk5yRCxDQUFDO0lBcE5RLFVBQVUsQ0FBQyxJQUFZO1FBQzVCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSx1QkFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2pDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQVFNLFNBQVMsQ0FBQyxRQUFtQyxFQUFFLE9BQTRCO1FBQ2hGLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSwwQkFBZ0IsQ0FBQyxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ3hELE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFRTSxLQUFLLENBQUMsS0FBeUIsRUFBRSxPQUE0QjtRQUNsRSxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksc0JBQVksQ0FBQyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFTTSxRQUFRLENBQUMsR0FBVyxFQUFFLEtBQXlCLEVBQUUsT0FBNEI7UUFDbEYsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLHlCQUFlLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDekQsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFD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